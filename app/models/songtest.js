// load the things we need
var mongoose = require('mongoose');
var bcrypt   = require('bcrypt-nodejs');
const Schema = mongoose.Schema;

// define the schema for our user model
var songtestSchema = mongoose.Schema({
    songTitle :String,
    songCompleted: String,
    songPublish: String,
    songChineseTitle: String,
    songContent: String,
    songDateFirstPublish :String,
    songRegisterDate :Date,
    songOwnerName :String,
    songOwnerRomanizedName: String,
    songUrl :String,
    songHash :String,
    songRightHolderName: String,
    songDigitalSignature :String,
    songContractAddress :String,
    songOwnerContractAddress :String,
    songOwnerId :String,
    songSize :Number,
    songExtension :String,
    songPlaceOfWork :String,
    songDateOfCompletion: String,
    songISRCNumber :String,
    songAlbumName :String,
    songLengthOfTime: String,
    songCountry :String,
    songCatNo: String,
    songDialect: String,
    songFormatCD :Boolean,
    songFormatDVD :Boolean,
    songFormatKaraoke :Boolean,
    songFormatDigital :Boolean,
    songFormatSocialMedia :Boolean,
    songOriginalVersion :Boolean,
    songRemixVersion :Boolean,
    songExtendVersion :Boolean,
    songReRecordingVersion :Boolean,
    songDisputeAddress: String,
    songTempUrl: String,
    songGenre: String,
    songBlockHash: String,
    songDeployStatus: Boolean,
    songIsMassRegistration: Boolean,
    songBlockConfirmed: Number,
    songMerkleRoot: String,
    songMerkleRootRefer: { type: Schema.Types.ObjectId, ref: 'Merkle' },
    songArtistRefer: { type: Schema.Types.ObjectId, ref: 'ArtistTest' },
    songLyricistsRefer: { type: Schema.Types.ObjectId, ref: 'ArtistTest' },
    songComposerRefer: { type: Schema.Types.ObjectId, ref: 'ArtistTest' },
    songArtistNameTemp: String,
    songIndexTemp: String,
    songDuration: String,
    songComposerRefer: { type: Schema.Types.ObjectId, ref: 'ArtistTest' },
    songLyricRefer: { type: Schema.Types.ObjectId, ref: 'ArtistTest' },
    songComposerName: String,
    songLyricName: String,
    songOrderRefer: [{ type: Schema.Types.ObjectId, ref: 'Order' }],
    songUserRefer: { type: Schema.Types.ObjectId, ref: 'UserTest' },
    OtherOwner : Array,
    verified: Boolean,
    songDisabled:Boolean,
    createAt: Date,
    updatedAt: Date,
    exportId: String,
    errorMessageUpload: String,
    errorCode: String,
    songLocalPath: String,
    avatarLocalPath: String,
    songConflict:Boolean,
    songConflictAddress:{ type: Schema.Types.ObjectId, ref: 'SongTest' },
    songConflictMessage:String,
    songErrorMessage:String,
    songError:Boolean,
    songMissingUrl:String //this is used when user upload missing file or replace current one.
}, {
    usePushEach: true
});

// create the model for users and expose it to our app
module.exports = mongoose.model('SongTest', songtestSchema);
